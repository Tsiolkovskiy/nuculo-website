package generated

import (
	"context"
	"backend/internal/graph/model"
)

// Minimal interfaces for testing - these would normally be generated by gqlgen
type QueryResolver interface {
	Me(ctx context.Context) (*model.User, error)
	User(ctx context.Context, id string) (*model.User, error)
	Posts(ctx context.Context, filters *model.PostFilters, pagination *model.PaginationInput) (*model.PostConnection, error)
	Post(ctx context.Context, id string) (*model.Post, error)
	SearchPosts(ctx context.Context, query string, limit *int) ([]*model.Post, error)
}

type MutationResolver interface {
	Login(ctx context.Context, email string, password string) (*model.AuthPayload, error)
	Register(ctx context.Context, email string, password string, name string) (*model.AuthPayload, error)
	RefreshToken(ctx context.Context) (*model.AuthPayload, error)
	CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error)
	UpdatePost(ctx context.Context, id string, input model.UpdatePostInput) (*model.Post, error)
	DeletePost(ctx context.Context, id string) (bool, error)
	AddComment(ctx context.Context, postID string, content string) (*model.Comment, error)
	DeleteComment(ctx context.Context, id string) (bool, error)
}

type SubscriptionResolver interface {
	PostAdded(ctx context.Context) (<-chan *model.Post, error)
	PostUpdated(ctx context.Context, id string) (<-chan *model.Post, error)
	CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error)
}

type CommentResolver interface {
	Author(ctx context.Context, obj *model.Comment) (*model.User, error)
	Post(ctx context.Context, obj *model.Comment) (*model.Post, error)
}

type PostResolver interface {
	Author(ctx context.Context, obj *model.Post) (*model.User, error)
}

// Mock implementation for testing - normally generated by gqlgen
type Config struct {
	Resolvers interface{}
}

type ExecutableSchema interface {
	// Mock interface
}

type mockExecutableSchema struct{}

func NewExecutableSchema(cfg Config) ExecutableSchema {
	return &mockExecutableSchema{}
}