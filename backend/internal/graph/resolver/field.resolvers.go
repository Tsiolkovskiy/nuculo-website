package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"backend/internal/graph/generated"
	"backend/internal/graph/model"
)

// Author is the resolver for the author field on Comment.
func (r *commentResolver) Author(ctx context.Context, obj *model.Comment) (*model.User, error) {
	// Get user by AuthorID
	user, err := r.UserRepo.GetByID(ctx, obj.AuthorID)
	if err != nil {
		return nil, fmt.Errorf("failed to get comment author: %w", err)
	}
	return user, nil
}

// Post is the resolver for the post field on Comment.
func (r *commentResolver) Post(ctx context.Context, obj *model.Comment) (*model.Post, error) {
	// Get post by PostID
	post, err := r.PostRepo.GetByID(ctx, obj.PostID)
	if err != nil {
		return nil, fmt.Errorf("failed to get comment post: %w", err)
	}
	return post, nil
}

// Author is the resolver for the author field on Post.
func (r *postResolver) Author(ctx context.Context, obj *model.Post) (*model.User, error) {
	// Get user by AuthorID
	user, err := r.UserRepo.GetByID(ctx, obj.AuthorID)
	if err != nil {
		return nil, fmt.Errorf("failed to get post author: %w", err)
	}
	return user, nil
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

type commentResolver struct{ *Resolver }
type postResolver struct{ *Resolver }