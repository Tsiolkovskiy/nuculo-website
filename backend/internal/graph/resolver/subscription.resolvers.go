package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"backend/internal/graph/generated"
	"backend/internal/graph/model"
	"backend/internal/subscription"
	"github.com/google/uuid"
)

// PostAdded is the resolver for the postAdded field.
func (r *subscriptionResolver) PostAdded(ctx context.Context) (<-chan *model.Post, error) {
	// Generate unique subscriber ID
	subscriberID := fmt.Sprintf("post_added_%s", uuid.New().String())
	
	// Create filter for post added events
	filter := func(event *subscription.Event) bool {
		return event.Type == subscription.PostAddedEvent
	}
	
	// Subscribe to events
	eventCh := r.SubManager.Subscribe(ctx, subscriberID, filter)
	
	// Create output channel
	postCh := make(chan *model.Post, 10)
	
	// Convert events to posts
	go func() {
		defer close(postCh)
		for {
			select {
			case event, ok := <-eventCh:
				if !ok {
					return
				}
				if event.Post != nil {
					select {
					case postCh <- event.Post:
					case <-ctx.Done():
						return
					}
				}
			case <-ctx.Done():
				return
			}
		}
	}()
	
	return postCh, nil
}

// PostUpdated is the resolver for the postUpdated field.
func (r *subscriptionResolver) PostUpdated(ctx context.Context, id string) (<-chan *model.Post, error) {
	// Generate unique subscriber ID
	subscriberID := fmt.Sprintf("post_updated_%s_%s", id, uuid.New().String())
	
	// Create filter for specific post updates
	filter := func(event *subscription.Event) bool {
		return event.Type == subscription.PostUpdatedEvent && event.PostID == id
	}
	
	// Subscribe to events
	eventCh := r.SubManager.Subscribe(ctx, subscriberID, filter)
	
	// Create output channel
	postCh := make(chan *model.Post, 10)
	
	// Convert events to posts
	go func() {
		defer close(postCh)
		for {
			select {
			case event, ok := <-eventCh:
				if !ok {
					return
				}
				if event.Post != nil {
					select {
					case postCh <- event.Post:
					case <-ctx.Done():
						return
					}
				}
			case <-ctx.Done():
				return
			}
		}
	}()
	
	return postCh, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	// Generate unique subscriber ID
	subscriberID := fmt.Sprintf("comment_added_%s_%s", postID, uuid.New().String())
	
	// Create filter for comments on specific post
	filter := func(event *subscription.Event) bool {
		return event.Type == subscription.CommentAddedEvent && event.PostID == postID
	}
	
	// Subscribe to events
	eventCh := r.SubManager.Subscribe(ctx, subscriberID, filter)
	
	// Create output channel
	commentCh := make(chan *model.Comment, 10)
	
	// Convert events to comments
	go func() {
		defer close(commentCh)
		for {
			select {
			case event, ok := <-eventCh:
				if !ok {
					return
				}
				if event.Comment != nil {
					select {
					case commentCh <- event.Comment:
					case <-ctx.Done():
						return
					}
				}
			case <-ctx.Done():
				return
			}
		}
	}()
	
	return commentCh, nil
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }